{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","console","log","className","onClick","onClickCallback","id","value","Board","squareList","squares","concat","map","square","generateSquareComponents","PLAYER_1","generateSquares","currentId","row","push","col","App","useState","setSquares","player","setPlayer","winner","setWinner","checkForWinner","i","winnerName","newSquares","forEach","board","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ca903c7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n  console.log(props)\n\n  return <button\n    className=\"square\"\n    onClick = {() => props.onClickCallback(props.id)}\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  // squares is a 2D Array, but \n  //  you need to return a 1D array\n  //  of square components\n  \n  // Flatten array out\n  const squareComponents = [].concat(...squares)\n\n  return squareComponents.map((square) => {\n    // console.log('square'+square)\n    return <Square \n        value = {square.value}\n        onClickCallback = {onClickCallback}\n        id = {square.id}\n        key = {square.id}\n      />\n  });\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n  const [player, setPlayer] = useState(PLAYER_1);\n  const [winner, setWinner] = useState(null)\n\n\n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n  const changeSquares = (id) => {\n\n    // ES6 way to clone an array\n    const newSquares = [...squares];\n\n    // If is not empty then set the value to the current player\n    newSquares.forEach((board) => {\n      board.forEach((square) => {\n        if (square.id === id && square.value === '') {\n          square.value = player;\n          if (player === PLAYER_1) {\n            setPlayer(PLAYER_2);\n          } else {\n            setPlayer(PLAYER_1);\n          };\n        };\n      });\n    });\n\n    setSquares(newSquares);\n    setWinner(checkForWinner())\n  }\n\n\n  const checkForWinner = () => {\n    // Complete in Wave 3\n    // You will need to:\n    // 1. Go accross each row to see if \n    //    3 squares in the same row match\n    //    i.e. same value\n    // 2. Go down each column to see if\n    //    3 squares in each column match\n    // 3. Go across each diagonal to see if \n    //    all three squares have the same value.\n\n    for (let i = 0; i < 3; i++) {\n        if (squares[i][0].value === squares[i][1].value && squares[i][1].value === squares[i][2].value && squares[i][1].value !== '') {\n            return squares[i][0].value;\n        }\n        if (squares[0][i].value === squares[1][i].value && squares[1][i].value === squares[2][i].value && squares[1][i].value !== '') {\n          return squares[0][i].value;\n      }\n    }\n\n    if (squares[1][1].value !== '') {\n      if (squares[0][0].value === squares[1][1].value && squares[0][0].value === squares[2][2].value) {\n        return squares[0][0].value;\n      } else if (squares[0][2].value === squares[1][1].value && squares[0][2].value === squares[2][0].value) {\n        return squares[0][2].value;\n      }\n    }\n\n    return null;\n  }\n\n  const resetGame = () => {\n    // Complete in Wave 4\n    setSquares(generateSquares());\n    setPlayer(PLAYER_1);\n    setWinner(null);\n  }\n\n  let winnerName = (winner == null ? `Current Player: ${player}` : `Winner is ${winner}`)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        {/* <h2>The winner is ...{winnerName} -- Fill in for wave 3 </h2> */}\n        <h2> {winnerName} </h2>\n        <button onClick = {() => resetGame()}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={changeSquares}/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}